"use strict";(self.webpackChunkbaked_docs=self.webpackChunkbaked_docs||[]).push([[9577],{9675:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var o=t(4848),r=t(8453);const a={},c="Baked Tools App",i={id:"developer/baked_app",title:"Baked Tools App",description:"Info about the Baked Tools App",source:"@site/docs/developer/baked_app.md",sourceDirName:"developer",slug:"/developer/baked_app",permalink:"/baked-docs/docs/developer/baked_app",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Developer Info",permalink:"/baked-docs/docs/category/developer-info"},next:{title:"Meta",permalink:"/baked-docs/docs/developer/meta"}},s={},p=[];function l(e){const n={blockquote:"blockquote",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"baked-tools-app",children:"Baked Tools App"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Info about the Baked Tools App"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The Baked Tools App is a pretty straightforward bash shell script turned into a mac app with automator. Here's the code."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'#!/bin/bash\n\n# Function to prompt for action using AppleScript\nprompt_for_action() {\n    osascript <<EOT\n        set action_list to {"Create Symlinks", "Transfer Shot", "Archive Show", "Visit Documentation Site"}\n        try\n            set chosen_action to choose from list action_list with prompt "What would you like to do?"\n            if chosen_action is false then\n                return "CANCELLED"\n            else\n                return item 1 of chosen_action\n            end if\n        on error\n            return "CANCELLED"\n        end try\nEOT\n}\n\n# Function to prompt for input using AppleScript\nprompt_for_input() {\n    prompt="$1"\n    default_answer="$2"\n    osascript <<EOT\n        try\n            set user_input to display dialog "$prompt" default answer "$default_answer"\n            return text returned of user_input\n        on error\n            return "CANCELLED"\n        end try\nEOT\n}\n\n# Function to prompt for category selection using AppleScript\nprompt_for_category() {\n    osascript <<EOT\n        set category_list to {"Film", "Series", "Music", "Commercial"}\n        try\n            set chosen_category to choose from list category_list with prompt "Select a category:"\n            if chosen_category is false then\n                return "CANCELLED"\n            else\n                return item 1 of chosen_category\n            end if\n        on error\n            return "CANCELLED"\n        end try\nEOT\n}\n\n# Function to show a popup message using AppleScript\nshow_popup() {\n    message="$1"\n    osascript <<EOT\n        display dialog "$message" buttons {"OK"} default button 1\nEOT\n}\n\n# Function to open the documentation site\nopen_documentation_site() {\n    open "https://bakedstudios.github.io/baked-docs/"\n}\n\n# Function to execute rsync command in a new terminal window\nexecute_rsync() {\n    local source_path="$1"\n    local destination_path="$2"\n    osascript <<EOT\n        tell application "Terminal"\n            activate\n            do script "rsync -avh --ignore-existing \'$source_path/\' \'$destination_path/\'"\n        end tell\nEOT\n}\n\n# Prompt for action\naction=$(prompt_for_action)\nif [ "$action" = "CANCELLED" ]; then\n    echo "Operation cancelled by the user."\n    exit 0\nfi\n\ncase "$action" in\n    "Create Symlinks")\n        # Continue with current script for creating symlinks\n        ;;\n    "Transfer Shot")\n        # Prompt for project name, category, and shot name\n        project_name=$(prompt_for_input "Enter the project name:" "")\n        if [ "$project_name" = "CANCELLED" ]; then\n            echo "Operation cancelled by the user at project name prompt."\n            exit 0\n        fi\n\n        category=$(prompt_for_category)\n        if [ "$category" = "CANCELLED" ]; then\n            echo "Operation cancelled by the user at category selection."\n            exit 0\n        fi\n\n        shot_name=$(prompt_for_input "Enter the shot name:" "")\n        if [ "$shot_name" = "CANCELLED" ]; then\n            echo "Operation cancelled by the user at shot name prompt."\n            exit 0\n        fi\n\n        # Ensure the project name, category, and shot name are not empty\n        if [ -z "$project_name" ] || [ -z "$category" ] || [ -z "$shot_name" ]; then\n            echo "Project name, category, or shot name cannot be empty."\n            exit 0\n        fi\n\n        # Define source and destination paths\n        source_path="/Volumes/BAKED/$category/$project_name/BASKET/2_WORK/1_SEQUENCES/VFX/$shot_name"\n        destination_path="/Volumes/BAKED/$category/$project_name/SUITE/2_WORK/1_SEQUENCES/VFX"\n\n        # Execute rsync command\n        execute_rsync "$source_path" "$destination_path"\n        exit 0\n        ;;\n    "Archive Show")\n        # Prompt for project name and category\n        project_name=$(prompt_for_input "Enter the project name:" "")\n        if [ "$project_name" = "CANCELLED" ]; then\n            echo "Operation cancelled by the user at project name prompt."\n            exit 0\n        fi\n\n        category=$(prompt_for_category)\n        if [ "$category" = "CANCELLED" ]; then\n            echo "Operation cancelled by the user at category selection."\n            exit 0\n        fi\n\n        # Ensure the project name and category are not empty\n        if [ -z "$project_name" ] || [ -z "$category" ]; then\n            echo "Project name or category cannot be empty."\n            exit 0\n        fi\n\n        # Define source and destination paths\n        source_path="/Volumes/BAKED/$category/$project_name/SUITE/2_WORK/1_SEQUENCES/VFX"\n        destination_path="/Volumes/BAKED/$category/$project_name/BASKET/2_WORK/1_SEQUENCES"\n\n        # Execute rsync command\n        execute_rsync "$source_path" "$destination_path"\n        exit 0\n        ;;\n    "Visit Documentation Site")\n        open_documentation_site\n        exit 0\n        ;;\n    *)\n        echo "Unknown action. Exiting."\n        exit 0\n        ;;\nesac\n\n# Prompt for project name and category for Create Symlinks option\nproject_name=$(prompt_for_input "Enter the project name:" "")\nif [ "$project_name" = "CANCELLED" ]; then\n    echo "Operation cancelled by the user at project name prompt."\n    exit 0\nfi\n\ncategory=$(prompt_for_category)\nif [ "$category" = "CANCELLED" ]; then\n    echo "Operation cancelled by the user at category selection."\n    exit 0\nfi\n\n# Ensure the project name and category are not empty\nif [ -z "$project_name" ] || [ -z "$category" ]; then\n    echo "Project name or category cannot be empty."\n    exit 0\nfi\n\n# Create the project directory\nbase_path="/Volumes/BAKED"\nproject_path="$base_path/$category/$project_name"\nlog_path="$base_path/symlink_creation_log.txt"\n\nmkdir -p "$project_path"\n\n# Create symbolic links\nlog_message() {\n    echo "$1" >> "$log_path"\n}\n\ncreate_symlink() {\n    target="$1"\n    link="$2"\n    if [ -L "$link" ]; then\n        log_message "Symlink at $link already exists. Skipping creation."\n    elif [[ -d "$target" ]]; then\n        ln -s "$target" "$link"\n        log_message "Created symlink at $link pointing to $target"\n    else\n        log_message "$target is unreachable. Symlink not created."\n        show_popup "$target is unreachable. If you\'re connected to this storage location and are still seeing this error, the project has not yet been created at this location. Otherwise, you can ignore this."\n    fi\n}\n\ncreate_symlink "/Volumes/Suite/$category/$project_name" "$project_path/SUITE"\ncreate_symlink "/Volumes/Basket/$category/$project_name" "$project_path/BASKET"\n\necho "Project directory and symbolic links created successfully."\nexit 0\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var o=t(6540);const r={},a=o.createContext(r);function c(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);